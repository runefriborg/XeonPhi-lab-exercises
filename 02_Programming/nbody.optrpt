
Begin optimization report for: main(int, char **)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(80,1) inlined into nbody.c(127,2)
   remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at nbody.c(80,1) inlined into nbody.c(131,2)
   remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at nbody.c(58,2) inlined into nbody.c(124,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Position line 60 and Acceleration line 61
   remark #15346: vector dependence: assumed OUTPUT dependence between Acceleration line 61 and Position line 60
LOOP END

LOOP BEGIN at nbody.c(63,2) inlined into nbody.c(124,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Mass line 65 and Acceleration_Z line 71
   remark #15346: vector dependence: assumed OUTPUT dependence between Acceleration_Z line 71 and Mass line 65
LOOP END

LOOP BEGIN at nbody.c(128,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(128,2)
      remark #15389: vectorization support: reference Acceleration has unaligned access   [ nbody.c(128,45) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.370 
      remark #15478: estimated potential speedup: 2.660 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at nbody.c(128,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(81,2) inlined into nbody.c(127,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(127,2)
   <Peeled>
   LOOP END

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(127,2)
      remark #15388: vectorization support: reference Mass has aligned access   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,13) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ nbody.c(92,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 110 
      remark #15477: vector loop cost: 24.500 
      remark #15478: estimated potential speedup: 3.840 
      remark #15479: lightweight vector operations: 66 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15487: type converts: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(127,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at nbody.c(81,2) inlined into nbody.c(131,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(131,2)
   <Peeled>
   LOOP END

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(131,2)
      remark #15388: vectorization support: reference Mass has aligned access   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,13) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ nbody.c(92,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 110 
      remark #15477: vector loop cost: 24.500 
      remark #15478: estimated potential speedup: 3.840 
      remark #15479: lightweight vector operations: 66 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15487: type converts: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at nbody.c(85,3) inlined into nbody.c(131,2)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Perform_NBody()

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody.c(80,1)
   remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at nbody.c(81,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.c(85,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at nbody.c(85,3)
      remark #15388: vectorization support: reference Mass has aligned access   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,34) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ nbody.c(92,13) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ nbody.c(92,13) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 110 
      remark #15477: vector loop cost: 24.500 
      remark #15478: estimated potential speedup: 3.840 
      remark #15479: lightweight vector operations: 66 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15487: type converts: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at nbody.c(85,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Initialize()

    Report from: Vector optimizations [vec]


LOOP BEGIN at nbody.c(58,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Position line 60 and Acceleration line 61
   remark #15346: vector dependence: assumed OUTPUT dependence between Acceleration line 61 and Position line 60
LOOP END

LOOP BEGIN at nbody.c(63,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Mass line 65 and Acceleration_Z line 71
   remark #15346: vector dependence: assumed OUTPUT dependence between Acceleration_Z line 71 and Mass line 65
LOOP END
===========================================================================
